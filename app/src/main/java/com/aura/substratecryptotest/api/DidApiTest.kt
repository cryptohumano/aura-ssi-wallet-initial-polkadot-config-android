package com.aura.substratecryptotest.api

import android.content.Context
import com.aura.substratecryptotest.utils.Logger
import com.aura.substratecryptotest.wallet.WalletManager
import kotlinx.coroutines.runBlocking

/**
 * Tests b√°sicos para el API Client
 * Verifica la conectividad y funcionalidad b√°sica
 */
class DidApiTest(private val context: Context) {
    
    companion object {
        private const val TAG = "DidApiTest"
    }
    
    private val walletManager = WalletManager(context)
    private val apiManager = DidApiManager(context, walletManager)
    
    /**
     * Ejecuta todos los tests b√°sicos
     */
    fun runBasicTests(): Boolean {
        return runBlocking {
            try {
                Logger.debug(TAG, "üß™ Iniciando tests b√°sicos del API Client", "Verificando conectividad")
                
                // Test 1: Verificar estado del servidor
                val healthTest = testServerHealth()
                if (!healthTest) {
                    Logger.error(TAG, "‚ùå Test 1: Servidor no disponible", "No se puede conectar al servidor", null)
                    return@runBlocking false
                }
                
                // Test 2: Iniciar autenticaci√≥n DID
                val authTest = testDidAuthentication()
                if (!authTest) {
                    Logger.error(TAG, "‚ùå Test 2: Autenticaci√≥n DID fallida", "No se pudo iniciar autenticaci√≥n", null)
                    return@runBlocking false
                }
                
                // Test 3: Verificar challenge
                val challengeTest = testChallengeVerification()
                if (!challengeTest) {
                    Logger.error(TAG, "‚ùå Test 3: Verificaci√≥n de challenge fallida", "No se pudo verificar challenge", null)
                    return@runBlocking false
                }
                
                // Test 4: Obtener estad√≠sticas
                val statsTest = testGetStats()
                if (!statsTest) {
                    Logger.error(TAG, "‚ùå Test 4: Obtenci√≥n de estad√≠sticas fallida", "No se pudieron obtener estad√≠sticas", null)
                    return@runBlocking false
                }
                
                Logger.success(TAG, "üéâ Todos los tests b√°sicos pasaron", "API Client funcionando correctamente")
                true
                
            } catch (e: Exception) {
                Logger.error(TAG, "‚ùå Error en tests b√°sicos del API Client", e.message ?: "Error desconocido", e)
                false
            }
        }
    }
    
    /**
     * Test 1: Verificar estado del servidor
     */
    private suspend fun testServerHealth(): Boolean {
        return try {
            Logger.debug(TAG, "üß™ Test 1: Verificando estado del servidor", "GET /health")
            
            val result = apiManager.initialize()
            if (result.isSuccess) {
                val health = result.getOrNull()
                Logger.success(TAG, "‚úÖ Test 1: Servidor disponible", "Status: ${health?.status}, Routes: ${health?.routes?.size}")
                true
            } else {
                Logger.error(TAG, "‚ùå Test 1: Servidor no disponible", result.exceptionOrNull()?.message ?: "Error desconocido", null)
                false
            }
        } catch (e: Exception) {
            Logger.error(TAG, "‚ùå Test 1: Excepci√≥n verificando servidor", e.message ?: "Error desconocido", e)
            false
        }
    }
    
    /**
     * Test 2: Iniciar autenticaci√≥n DID
     */
    private suspend fun testDidAuthentication(): Boolean {
        return try {
            Logger.debug(TAG, "üß™ Test 2: Iniciando autenticaci√≥n DID", "Challenge: test_challenge_api")
            
            // Primero derivar el DID KILT si no existe
            val currentWalletInfo = walletManager.getCurrentWalletInfo()
            if (currentWalletInfo != null && currentWalletInfo.kiltAddress == null) {
                Logger.debug(TAG, "üîß Derivando DID KILT para autenticaci√≥n", "Generando DID desde wallet actual")
                val derivationResult = walletManager.deriveKiltDidFromCurrentWallet()
                if (derivationResult == null) {
                    Logger.error(TAG, "‚ùå No se pudo derivar DID KILT", "Derivaci√≥n fallida", null)
                    return false
                }
                Logger.success(TAG, "‚úÖ DID KILT derivado exitosamente", "DID: ${derivationResult.did}")
                
                // Verificar que el DID se guard√≥ correctamente
                val updatedWalletInfo = walletManager.getCurrentWalletInfo()
                if (updatedWalletInfo?.kiltAddress != null) {
                    Logger.success(TAG, "‚úÖ DID guardado en wallet", "Address: ${updatedWalletInfo.kiltAddress}")
                } else {
                    Logger.error(TAG, "‚ùå DID no se guard√≥ en wallet", "Persistencia fallida", null)
                    return false
                }
            } else if (currentWalletInfo?.kiltAddress != null) {
                Logger.success(TAG, "‚úÖ DID ya existe en wallet", "Address: ${currentWalletInfo.kiltAddress}")
            }
            
            val testChallenge = "test_challenge_api_${System.currentTimeMillis()}"
            val result = apiManager.startDidAuthentication(testChallenge, useBiometric = false)
            
            if (result.isSuccess) {
                val authResult = result.getOrNull()
                Logger.success(TAG, "‚úÖ Test 2: Autenticaci√≥n DID iniciada", "SessionId: ${authResult?.sessionData?.sessionId?.take(10)}..., Token: ${authResult?.authToken?.take(20)}...")
                true
            } else {
                Logger.error(TAG, "‚ùå Test 2: Error iniciando autenticaci√≥n DID", result.exceptionOrNull()?.message ?: "Error desconocido", null)
                false
            }
        } catch (e: Exception) {
            Logger.error(TAG, "‚ùå Test 2: Excepci√≥n iniciando autenticaci√≥n DID", e.message ?: "Error desconocido", e)
            false
        }
    }
    
    /**
     * Test 3: Verificar challenge
     */
    private suspend fun testChallengeVerification(): Boolean {
        return try {
            Logger.debug(TAG, "üß™ Test 3: Verificando challenge", "Usando datos de sesi√≥n activa")
            
            if (!apiManager.hasActiveSession()) {
                Logger.error(TAG, "‚ùå Test 3: No hay sesi√≥n activa", "Iniciar autenticaci√≥n primero", null)
                return false
            }
            
            // Crear un challenge de prueba
            val testChallenge = "test_verification_${System.currentTimeMillis()}"
            val encryptionKey = apiManager.currentSessionData?.encryptionKey
            
            if (encryptionKey == null) {
                Logger.error(TAG, "‚ùå Test 3: No hay encryption key disponible", "Sesi√≥n incompleta", null)
                return false
            }
            
            // Encriptar challenge
            val encryptionKeyManager = com.aura.substratecryptotest.crypto.encryption.EncryptionKeyManager(context)
            val encrypted = encryptionKeyManager.encryptChallenge(testChallenge, encryptionKey)
            
            if (encrypted != null) {
                val (encryptedChallenge, nonce) = encrypted
                
                // Verificar challenge
                val result = apiManager.verifyChallenge(encryptedChallenge, nonce, encryptionKey)
                
                if (result.isSuccess) {
                    val decryptedChallenge = result.getOrNull()
                    if (decryptedChallenge == testChallenge) {
                        Logger.success(TAG, "‚úÖ Test 3: Challenge verificado correctamente", "Original: '$testChallenge' == Desencriptado: '$decryptedChallenge'")
                        true
                    } else {
                        Logger.error(TAG, "‚ùå Test 3: Challenge desencriptado incorrectamente", "Expected: '$testChallenge', Got: '$decryptedChallenge'", null)
                        false
                    }
                } else {
                    Logger.error(TAG, "‚ùå Test 3: Error verificando challenge", result.exceptionOrNull()?.message ?: "Error desconocido", null)
                    false
                }
            } else {
                Logger.error(TAG, "‚ùå Test 3: Error encriptando challenge", "No se pudo encriptar", null)
                false
            }
        } catch (e: Exception) {
            Logger.error(TAG, "‚ùå Test 3: Excepci√≥n verificando challenge", e.message ?: "Error desconocido", e)
            false
        }
    }
    
    /**
     * Test 4: Obtener estad√≠sticas
     */
    private suspend fun testGetStats(): Boolean {
        return try {
            Logger.debug(TAG, "üß™ Test 4: Obteniendo estad√≠sticas de firmas", "GET /stats")
            
            val result = apiManager.getUserSignatureStats()
            if (result.isSuccess) {
                val stats = result.getOrNull()
                Logger.success(TAG, "‚úÖ Test 4: Estad√≠sticas obtenidas", "Contracts: ${stats?.contractsWithDidSignatures}, Signatures: ${stats?.userDidSignatures}")
                true
            } else {
                Logger.error(TAG, "‚ùå Test 4: Error obteniendo estad√≠sticas", result.exceptionOrNull()?.message ?: "Error desconocido", null)
                false
            }
        } catch (e: Exception) {
            Logger.error(TAG, "‚ùå Test 4: Excepci√≥n obteniendo estad√≠sticas", e.message ?: "Error desconocido", e)
            false
        }
    }
    
    /**
     * Limpia la sesi√≥n despu√©s de los tests
     */
    fun cleanup() {
        Logger.debug(TAG, "üßπ Limpiando sesi√≥n despu√©s de tests", "Cerrando sesi√≥n activa")
        apiManager.closeSession()
        Logger.success(TAG, "‚úÖ Sesi√≥n limpiada", "Tests completados")
    }
}
